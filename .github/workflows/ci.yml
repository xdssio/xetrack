name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Configure pip to prefer binary wheels
      run: |
        pip config set global.prefer-binary true
        pip install --upgrade pip setuptools wheel
    
    - name: Pre-install critical packages with wheels
      run: |
        # Ensure we only use binary wheels
        pip install --upgrade pip wheel setuptools
        # Install numpy based on Python version
        if python -c "import sys; exit(0 if sys.version_info[:2] >= (3, 12) else 1)"; then
          # Python 3.12+ needs numpy 1.26+
          pip install --only-binary=:all: "numpy>=1.26.0,<2.0"
        else
          # Python 3.9-3.11 can use numpy 1.25.2
          pip install --only-binary=:all: numpy==1.25.2
        fi
        # Pre-install pandas which depends on numpy
        pip install --only-binary=:all: "pandas>=2.0.3"
        # Pre-install other scientific packages
        pip install --only-binary=:all: "scipy>=1.10.0" "scikit-learn>=1.0.0" || true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --with dev --extras dev
    
    - name: Install project
      run: poetry install --no-interaction --with dev --extras dev
    
    - name: Run tests
      run: poetry run pytest tests/ -v --tb=short
    
    - name: Test CLI
      run: |
        poetry run xt --help
        poetry run python -c "import xetrack; print('Import successful, version:', xetrack.__version__)"

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Configure pip to prefer binary wheels
      run: |
        pip config set global.prefer-binary true
        pip install --upgrade pip setuptools wheel
    
    - name: Pre-install critical packages with wheels
      run: |
        # Ensure we only use binary wheels
        pip install --upgrade pip wheel setuptools
        # Install numpy based on Python version
        if python -c "import sys; exit(0 if sys.version_info[:2] >= (3, 12) else 1)"; then
          # Python 3.12+ needs numpy 1.26+
          pip install --only-binary=:all: "numpy>=1.26.0,<2.0"
        else
          # Python 3.9-3.11 can use numpy 1.25.2
          pip install --only-binary=:all: numpy==1.25.2
        fi
        # Pre-install pandas which depends on numpy
        pip install --only-binary=:all: "pandas>=2.0.3"
        # Pre-install other scientific packages
        pip install --only-binary=:all: "scipy>=1.10.0" "scikit-learn>=1.0.0" || true
    
    - name: Install dependencies
      run: poetry install --no-interaction --with dev --extras dev
    
    - name: Check code formatting with black (dry-run)
      run: poetry run python -m black --check --diff xetrack tests
      continue-on-error: true
    
    - name: Type check with mypy (if available)
      run: |
        if poetry run python -c "import mypy" 2>/dev/null; then
          poetry run mypy xetrack --ignore-missing-imports
        else
          echo "mypy not installed, skipping type check"
        fi
      continue-on-error: true

  test-extras:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        extras: [duckdb, assets, bashplotlib]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Configure pip to prefer binary wheels
      run: |
        pip config set global.prefer-binary true
        pip install --upgrade pip setuptools wheel
    
    - name: Pre-install critical packages with wheels
      run: |
        # Ensure we only use binary wheels
        pip install --upgrade pip wheel setuptools
        # Install numpy based on Python version
        if python -c "import sys; exit(0 if sys.version_info[:2] >= (3, 12) else 1)"; then
          # Python 3.12+ needs numpy 1.26+
          pip install --only-binary=:all: "numpy>=1.26.0,<2.0"
        else
          # Python 3.9-3.11 can use numpy 1.25.2
          pip install --only-binary=:all: numpy==1.25.2
        fi
        # Pre-install pandas which depends on numpy
        pip install --only-binary=:all: "pandas>=2.0.3"
        # Pre-install other scientific packages
        pip install --only-binary=:all: "scipy>=1.10.0" "scikit-learn>=1.0.0" || true
    
    - name: Install dependencies with ${{ matrix.extras }}
      run: poetry install --no-interaction --with dev --extras "dev ${{ matrix.extras }}"
    
    - name: Test ${{ matrix.extras }} functionality
      run: |
        if [ "${{ matrix.extras }}" = "duckdb" ]; then
          poetry run python -c "import duckdb; print('DuckDB import successful')"
          poetry run pytest tests/duckdb_test.py -v || true
        elif [ "${{ matrix.extras }}" = "assets" ]; then
          poetry run python -c "import sqlitedict; print('sqlitedict import successful')"
          poetry run pytest tests/assets_test.py -v || true
        elif [ "${{ matrix.extras }}" = "bashplotlib" ]; then
          poetry run python -c "import bashplotlib; print('bashplotlib import successful')"
        fi
